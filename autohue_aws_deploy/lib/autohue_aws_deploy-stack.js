"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AutohueAwsDeployStack = void 0;
const cdk = require("aws-cdk-lib");
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cdk_lib_2 = require("aws-cdk-lib");
const aws_cdk_lib_3 = require("aws-cdk-lib");
const functions = require("./functions");
class AutohueAwsDeployStack extends cdk.Stack {
    constructor(scope, id, templateConfig, props) {
        super(scope, id, props);
        const hueApiKeyParam = new aws_cdk_lib_1.aws_ssm.StringParameter(this, 'HueApiKeyParameter', {
            description: 'Parameter for the Philips Hue API',
            parameterName: 'hue-api-key',
            stringValue: templateConfig.hueApiKey,
        });
        const modelBucket = new aws_cdk_lib_2.aws_s3.Bucket(this, 'ModelBucket');
        const cronRule = new aws_cdk_lib_3.aws_events.Rule(this, 'TemperatureCronRule', {
            schedule: aws_cdk_lib_3.aws_events.Schedule.expression('cron(* 6-23 * * *)')
        });
        // example resource
        // const queue = new sqs.Queue(this, 'AutohueAwsDeployQueue', {
        //   visibilityTimeout: cdk.Duration.seconds(300)
        // });
        this.createFunctions(templateConfig.lambdaFunctions.modelGeneratorFnModuleName, templateConfig.lambdaFunctions.temperatureCycleFnModuleName, templateConfig.lambdaFunctions.updaterFnModuleName, modelBucket, templateConfig.hueAddress, hueApiKeyParam, templateConfig.lightGroup, cronRule);
    }
    createFunctions(modelGeneratorFnModuleName, temperatureCycleFnModuleName, updaterFnModuleName, modelBucket, address, hueApiKey, lightGroup, cronTriggerEvent, dbWriterFnModuleName, writeQueue) {
        const webParams = {
            address: address,
            hueApiKey: hueApiKey
        };
        const updateFn = functions.createUpdaterFn(this, webParams, cronTriggerEvent, updaterFnModuleName);
        const temperatureCycleFn = functions.createTemperatureCycleFn(this, webParams, modelBucket, temperatureCycleFnModuleName, lightGroup, cronTriggerEvent);
        const modelGeneratorFn = functions.createModelGeneratorFn(this, temperatureCycleFn, modelGeneratorFnModuleName, modelBucket);
    }
}
exports.AutohueAwsDeployStack = AutohueAwsDeployStack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2h1ZV9hd3NfZGVwbG95LXN0YWNrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXV0b2h1ZV9hd3NfZGVwbG95LXN0YWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFtQztBQUVuQyw2Q0FBNEM7QUFDNUMsNkNBQTJDO0FBQzNDLDZDQUFtRDtBQUduRCx5Q0FBeUM7QUFFekMsTUFBYSxxQkFBc0IsU0FBUSxHQUFHLENBQUMsS0FBSztJQUNsRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLGNBQThCLEVBQUUsS0FBc0I7UUFDOUYsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxjQUFjLEdBQUcsSUFBSSxxQkFBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLEVBQUUsb0JBQW9CLEVBQUU7WUFDekUsV0FBVyxFQUFFLG1DQUFtQztZQUNoRCxhQUFhLEVBQUUsYUFBYTtZQUM1QixXQUFXLEVBQUUsY0FBYyxDQUFDLFNBQVM7U0FDdEMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsSUFBSSxvQkFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFFdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSx3QkFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUscUJBQXFCLEVBQUU7WUFDNUQsUUFBUSxFQUFFLHdCQUFNLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxvQkFBb0IsQ0FBQztTQUMzRCxDQUFDLENBQUE7UUFFRixtQkFBbUI7UUFDbkIsK0RBQStEO1FBQy9ELGlEQUFpRDtRQUNqRCxNQUFNO1FBQ04sSUFBSSxDQUFDLGVBQWUsQ0FDaEIsY0FBYyxDQUFDLGVBQWUsQ0FBQywwQkFBMEIsRUFDekQsY0FBYyxDQUFDLGVBQWUsQ0FBQyw0QkFBNEIsRUFDM0QsY0FBYyxDQUFDLGVBQWUsQ0FBQyxtQkFBbUIsRUFDbEQsV0FBVyxFQUFFLGNBQWMsQ0FBQyxVQUFVLEVBQUUsY0FBYyxFQUN0RCxjQUFjLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQzFDLENBQUM7SUFFTyxlQUFlLENBQ25CLDBCQUFrQyxFQUFFLDRCQUFvQyxFQUN4RSxtQkFBMkIsRUFBRSxXQUFzQixFQUNuRCxPQUFlLEVBQUUsU0FBOEIsRUFDL0MsVUFBa0IsRUFBRSxnQkFBNkIsRUFDakQsb0JBQTZCLEVBQUUsVUFBc0I7UUFFdkQsTUFBTSxTQUFTLEdBQXdCO1lBQ3JDLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFNBQVMsRUFBRSxTQUFTO1NBQ3JCLENBQUE7UUFDRCxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsZUFBZSxDQUN0QyxJQUFJLEVBQUUsU0FBUyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixDQUNyRCxDQUFDO1FBQ04sTUFBTSxrQkFBa0IsR0FBRyxTQUFTLENBQUMsd0JBQXdCLENBQ3pELElBQUksRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLDRCQUE0QixFQUFFLFVBQVUsRUFBRSxnQkFBZ0IsQ0FDM0YsQ0FBQztRQUNGLE1BQU0sZ0JBQWdCLEdBQUcsU0FBUyxDQUFDLHNCQUFzQixDQUNyRCxJQUFJLEVBQUUsa0JBQWtCLEVBQUUsMEJBQTBCLEVBQUUsV0FBVyxDQUNwRSxDQUFBO0lBQ0gsQ0FBQztDQUNGO0FBakRELHNEQWlEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IGF3c19zc20gYXMgc3NtfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IGF3c19zMyBhcyBzMyB9IGZyb20gXCJhd3MtY2RrLWxpYlwiO1xuaW1wb3J0IHsgYXdzX2V2ZW50cyBhcyBldmVudHMgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCB7IFRlbXBsYXRlQ29uZmlnIH0gZnJvbSBcIi4vdGVtcGxhdGUtY29uZmlnc1wiO1xuaW1wb3J0IHsgYXdzX3NxcyBhcyBzcXMgfSBmcm9tIFwiYXdzLWNkay1saWJcIjtcbmltcG9ydCAqIGFzIGZ1bmN0aW9ucyBmcm9tIFwiLi9mdW5jdGlvbnNcIjtcblxuZXhwb3J0IGNsYXNzIEF1dG9odWVBd3NEZXBsb3lTdGFjayBleHRlbmRzIGNkay5TdGFjayB7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHRlbXBsYXRlQ29uZmlnOiBUZW1wbGF0ZUNvbmZpZywgcHJvcHM/OiBjZGsuU3RhY2tQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xuXG4gICAgY29uc3QgaHVlQXBpS2V5UGFyYW0gPSBuZXcgc3NtLlN0cmluZ1BhcmFtZXRlcih0aGlzLCAnSHVlQXBpS2V5UGFyYW1ldGVyJywge1xuICAgICAgZGVzY3JpcHRpb246ICdQYXJhbWV0ZXIgZm9yIHRoZSBQaGlsaXBzIEh1ZSBBUEknLFxuICAgICAgcGFyYW1ldGVyTmFtZTogJ2h1ZS1hcGkta2V5JyxcbiAgICAgIHN0cmluZ1ZhbHVlOiB0ZW1wbGF0ZUNvbmZpZy5odWVBcGlLZXksXG4gICAgfSk7XG5cbiAgICBjb25zdCBtb2RlbEJ1Y2tldCA9IG5ldyBzMy5CdWNrZXQodGhpcywgJ01vZGVsQnVja2V0Jyk7XG5cbiAgICBjb25zdCBjcm9uUnVsZSA9IG5ldyBldmVudHMuUnVsZSh0aGlzLCAnVGVtcGVyYXR1cmVDcm9uUnVsZScsIHtcbiAgICAgIHNjaGVkdWxlOiBldmVudHMuU2NoZWR1bGUuZXhwcmVzc2lvbignY3JvbigqIDYtMjMgKiAqICopJylcbiAgICB9KVxuXG4gICAgLy8gZXhhbXBsZSByZXNvdXJjZVxuICAgIC8vIGNvbnN0IHF1ZXVlID0gbmV3IHNxcy5RdWV1ZSh0aGlzLCAnQXV0b2h1ZUF3c0RlcGxveVF1ZXVlJywge1xuICAgIC8vICAgdmlzaWJpbGl0eVRpbWVvdXQ6IGNkay5EdXJhdGlvbi5zZWNvbmRzKDMwMClcbiAgICAvLyB9KTtcbiAgICB0aGlzLmNyZWF0ZUZ1bmN0aW9ucyhcbiAgICAgICAgdGVtcGxhdGVDb25maWcubGFtYmRhRnVuY3Rpb25zLm1vZGVsR2VuZXJhdG9yRm5Nb2R1bGVOYW1lLFxuICAgICAgICB0ZW1wbGF0ZUNvbmZpZy5sYW1iZGFGdW5jdGlvbnMudGVtcGVyYXR1cmVDeWNsZUZuTW9kdWxlTmFtZSxcbiAgICAgICAgdGVtcGxhdGVDb25maWcubGFtYmRhRnVuY3Rpb25zLnVwZGF0ZXJGbk1vZHVsZU5hbWUsXG4gICAgICAgIG1vZGVsQnVja2V0LCB0ZW1wbGF0ZUNvbmZpZy5odWVBZGRyZXNzLCBodWVBcGlLZXlQYXJhbSxcbiAgICAgICAgdGVtcGxhdGVDb25maWcubGlnaHRHcm91cCwgY3JvblJ1bGUpXG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUZ1bmN0aW9ucyhcbiAgICAgIG1vZGVsR2VuZXJhdG9yRm5Nb2R1bGVOYW1lOiBzdHJpbmcsIHRlbXBlcmF0dXJlQ3ljbGVGbk1vZHVsZU5hbWU6IHN0cmluZyxcbiAgICAgIHVwZGF0ZXJGbk1vZHVsZU5hbWU6IHN0cmluZywgbW9kZWxCdWNrZXQ6IHMzLkJ1Y2tldCxcbiAgICAgIGFkZHJlc3M6IHN0cmluZywgaHVlQXBpS2V5OiBzc20uU3RyaW5nUGFyYW1ldGVyLFxuICAgICAgbGlnaHRHcm91cDogc3RyaW5nLCBjcm9uVHJpZ2dlckV2ZW50OiBldmVudHMuUnVsZSxcbiAgICAgIGRiV3JpdGVyRm5Nb2R1bGVOYW1lPzogc3RyaW5nLCB3cml0ZVF1ZXVlPzogc3FzLlF1ZXVlLFxuICApe1xuICAgIGNvbnN0IHdlYlBhcmFtczogZnVuY3Rpb25zLldlYlBhcmFtcyA9IHtcbiAgICAgIGFkZHJlc3M6IGFkZHJlc3MsXG4gICAgICBodWVBcGlLZXk6IGh1ZUFwaUtleVxuICAgIH1cbiAgICBjb25zdCB1cGRhdGVGbiA9IGZ1bmN0aW9ucy5jcmVhdGVVcGRhdGVyRm4oXG4gICAgICAgIHRoaXMsIHdlYlBhcmFtcywgY3JvblRyaWdnZXJFdmVudCwgdXBkYXRlckZuTW9kdWxlTmFtZSxcbiAgICAgICAgKTtcbiAgICBjb25zdCB0ZW1wZXJhdHVyZUN5Y2xlRm4gPSBmdW5jdGlvbnMuY3JlYXRlVGVtcGVyYXR1cmVDeWNsZUZuKFxuICAgICAgICB0aGlzLCB3ZWJQYXJhbXMsIG1vZGVsQnVja2V0LCB0ZW1wZXJhdHVyZUN5Y2xlRm5Nb2R1bGVOYW1lLCBsaWdodEdyb3VwLCBjcm9uVHJpZ2dlckV2ZW50XG4gICAgKTtcbiAgICBjb25zdCBtb2RlbEdlbmVyYXRvckZuID0gZnVuY3Rpb25zLmNyZWF0ZU1vZGVsR2VuZXJhdG9yRm4oXG4gICAgICAgIHRoaXMsIHRlbXBlcmF0dXJlQ3ljbGVGbiwgbW9kZWxHZW5lcmF0b3JGbk1vZHVsZU5hbWUsIG1vZGVsQnVja2V0XG4gICAgKVxuICB9XG59XG5cbiJdfQ==