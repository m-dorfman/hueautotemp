"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createUpdaterFn = exports.createTemperatureCycleFn = exports.createModelGeneratorFn = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const aws_cdk_lib_2 = require("aws-cdk-lib");
const aws_cdk_lib_3 = require("aws-cdk-lib");
const utils_1 = require("./utils");
function createModelGeneratorFn(scope, temperatureCycleFn, modelGeneratorFnModuleName, modelBucket) {
    const modelGeneratorFn = new aws_cdk_lib_1.aws_lambda.Function(scope, 'ModelGeneratorFn', {
        description: 'Generates a model and serializes it for the temperature cycle funct',
        runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_8,
        handler: `${modelGeneratorFnModuleName}.lambda_handler`,
        code: aws_cdk_lib_1.aws_lambda.Code.fromAsset((0, utils_1.getLambdaCodePath)(modelGeneratorFnModuleName)),
        environment: {
            "CALLER_FUNCTION_NAME": temperatureCycleFn.functionName,
            "MODEL_BUCKET_NAME": modelBucket.bucketName,
            "MODEL_OBJECT_KEY_ENV_VAR": "MODEL_OBJECT_KEY", // this is the env var key from the temperature fn
        },
    });
    modelGeneratorFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['s3:PutObject',],
        resources: [modelBucket.bucketArn,]
    }));
    modelGeneratorFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['lambda:UpdateFunctionConfiguration',],
        resources: [temperatureCycleFn.functionArn,]
    }));
    return modelGeneratorFn;
}
exports.createModelGeneratorFn = createModelGeneratorFn;
function createTemperatureCycleFn(scope, webParams, modelBucket, temperatureFnModuleName, lightGroup, cronTriggerEvent) {
    const temperatureCycleFn = new aws_cdk_lib_1.aws_lambda.Function(scope, 'TemperatureCycleFn', {
        description: 'Sends request to Hue device(s) to set light temperature',
        runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_8,
        handler: `${temperatureFnModuleName}.lambda_handler`,
        code: aws_cdk_lib_1.aws_lambda.Code.fromAsset((0, utils_1.getLambdaCodePath)(temperatureFnModuleName)),
        environment: {
            "API_KEY_SSM_PARAM": webParams.hueApiKey.parameterName,
            "ADDRESS": webParams.address,
            "MODEL_BUCKET_NAME": modelBucket.bucketName,
            "MODEL_OBJECT_KEY": '',
            "LIGHT_GROUP": lightGroup,
        },
    });
    cronTriggerEvent.addTarget(new aws_cdk_lib_3.aws_events_targets.LambdaFunction(temperatureCycleFn));
    aws_cdk_lib_3.aws_events_targets.addLambdaPermission(cronTriggerEvent, temperatureCycleFn);
    temperatureCycleFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['s3:GetObject',],
        resources: [modelBucket.bucketArn,]
    }));
    temperatureCycleFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['ssm:GetParameter',],
        resources: [webParams.hueApiKey.parameterArn,]
    }));
    return temperatureCycleFn;
}
exports.createTemperatureCycleFn = createTemperatureCycleFn;
function createUpdaterFn(scope, webParams, cronTriggerEvent, updaterFnModuleName, writeQueue) {
    const updaterFn = new aws_cdk_lib_1.aws_lambda.Function(scope, 'UpdaterFn', {
        description: 'Performs updating functions upon light actions',
        runtime: aws_cdk_lib_1.aws_lambda.Runtime.PYTHON_3_8,
        handler: `${updaterFnModuleName}.lambda_handler`,
        code: aws_cdk_lib_1.aws_lambda.Code.fromAsset((0, utils_1.getLambdaCodePath)(updaterFnModuleName)),
        environment: {
            "API_KEY_SSM_PARAM": webParams.hueApiKey.parameterName,
            "ADDRESS": webParams.address,
            "CRON_EVENT_NAME": cronTriggerEvent.ruleName,
        },
    });
    if (typeof writeQueue !== 'undefined') {
        updaterFn.addEnvironment("WRITE_QUEUE_NAME", writeQueue.queueName);
        updaterFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
            actions: ['sqs:SendMessage', 'sqs:GetQueueAttributes', 'sqs:GetQueueUrl',],
            resources: [writeQueue.queueArn,]
        }));
    }
    else {
        updaterFn.addEnvironment("WRITE_QUEUE_NAME", '');
    }
    updaterFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['ssm:GetParameter',],
        resources: [webParams.hueApiKey.parameterArn,]
    }));
    updaterFn.addToRolePolicy(new aws_cdk_lib_2.aws_iam.PolicyStatement({
        actions: ['events:DisableRule', 'events:EnableRule',],
        resources: [cronTriggerEvent.ruleArn,]
    }));
    return updaterFn;
}
exports.createUpdaterFn = createUpdaterFn;
//# sourceMappingURL=data:application/json;base64,